{"command.restartServer":"重启服务器","extension.description":"使用 autopep8 格式化程序对 Python 文件进行格式支持。","settings.args.description":"传递给 autopep8 以格式化 Python 文件的参数。应在数组中将每个参数作为单独的字符串提供。\n示例:\n`\"autopep8.args\" = [\"--config\", \"<file>\"]`","settings.cwd.description":"设置用于使用 autopep8 格式化 Python 文件的当前工作目录。默认情况下，它使用工作区 `${workspaceFolder}` 的根目录。可以将其设置为 `${fileDirname}`，以使用正在格式化的文件的父文件夹作为 autopep8 的工作目录。","settings.importStrategy.description":"定义要用于格式化 Python 文件的 autopep8 格式化程序二进制文件。当设置为`useBundled`时，扩展将使用随附于扩展的 autopep8 格式化程序二进制文件。设置为`fromEnvironment`时，扩展将尝试使用 autopep8 格式化程序二进制文件和当前所选环境中可用的所有依赖项。**注意**: 如果扩展在所选环境中找不到有效的 autopep8 格式化程序二进制文件，它将回退到使用随扩展附带的二进制文件。`autopep8.path`设置优先，将替代`autopep8.importStrategy`的行为。","settings.importStrategy.fromEnvironment.description":"使用所选 Python 环境中的 autopep8 二进制文件。如果扩展找不到有效的 autopep8 二进制文件，它将回退到使用捆绑版 autopep8。","settings.importStrategy.useBundled.description":"始终使用捆绑版本的 autopep8 设置 Python 文件的格式。","settings.interpreter.description":"将用于启动 autopep8 服务器和任何子进程的 Python 可执行文件或命令的路径。接受单个或多个字符串的数组。设置为`[]`时，扩展将使用所选 Python 解释器的路径。如果传递命令，则应在数组中将每个参数作为单独的字符串提供。","settings.path.description":"扩展通过 autopep8 格式化 Python 文件时使用的路径或命令。接受单个或多个字符串的数组。如果传递命令，应将每个参数作为数组中单独的字符串提供。如果设置为 `[\"autopep8\"]`，它将使用 `PATH` 环境变量中可用的 autopep8 版本。注意: 使用此选项可能会减慢格式化速度。\n 示例:\n - `[\"~/global_env/autopep8\"]`\n - `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"autopep8\"]`","settings.showNotifications.always.description":"在格式化 Python 文件时，服务器选择显示的任何内容都会显示通知。","settings.showNotifications.description":"控制此扩展显示通知的时间。","settings.showNotifications.off.description":"所有通知均已关闭，但在格式化 Python 文件时出现的任何错误或警告仍可在日志中找到。","settings.showNotifications.onError.description":"仅当格式化 Python 文件时出现错误时，才会显示通知。","settings.showNotifications.onWarning.description":"对 Python 文件进行格式化时，会显示任何错误和警告的通知。"}
