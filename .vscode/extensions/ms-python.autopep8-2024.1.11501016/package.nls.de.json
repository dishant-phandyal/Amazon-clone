{"command.restartServer":"Server neu starten","extension.description":"Formatierungsunterstützung für Python-Dateien mithilfe des autopep8-Formatierers.","settings.args.description":"Argumente, die an autopep8 übergeben werden, um Python-Dateien zu formatieren. Jedes Argument sollte als separate Zeichenfolge im Array bereitgestellt werden. \n Beispiel: \n `\"autopep8.args\" = [\"--config\", \"<file>\"]`","settings.cwd.description":"Legt das aktuelle Arbeitsverzeichnis fest, das zum Formatieren von Python-Dateien mit autopep8 verwendet wird. Standardmäßig wird das Stammverzeichnis des Arbeitsbereichs „${workspaceFolder}“ verwendet. Sie können es auf „${fileDirname}“ festlegen, um den übergeordneten Ordner der Datei zu verwenden, die als Arbeitsverzeichnis für autopep8 formatiert wird.","settings.importStrategy.description":"Definiert, welche autopep8-Formatierungsbinärdatei zum Formatieren von Python-Dateien verwendet werden soll. Bei Festlegung auf \"useBundled\" verwendet die Erweiterung die autopep8-Formatiererbinärdatei, die mit der Erweiterung ausgeliefert wird. Bei Festlegung auf \"fromEnvironment\" versucht die Erweiterung, die autopep8-Formatierungsprogrammbinärdatei und alle Abhängigkeiten zu verwenden, die in der aktuell ausgewählten Umgebung verfügbar sind. **Hinweis**: Wenn die Erweiterung keine gültige autopep8-Formatierungsbinärdatei in der ausgewählten Umgebung finden kann, wird ein Fallback auf die Verwendung der Binärdatei ausgeführt, die mit der Erweiterung ausgeliefert wird. Die Einstellung \"autopep8.path\" hat Vorrang und überschreibt das Verhalten von \"autopep8.importStrategy\".","settings.importStrategy.fromEnvironment.description":"Verwenden Sie die autopep8-Binärdatei aus der ausgewählten Python-Umgebung. Wenn die Erweiterung keine gültige autopep8-Binärdatei findet, wird ein Fallback auf die Verwendung der gebündelten Version von autopep8 ausgeführt.","settings.importStrategy.useBundled.description":"Verwenden Sie immer die gebündelte Version von autopep8, um Python-Dateien zu formatieren.","settings.interpreter.description":"Pfad zu einer ausführbaren Python-Datei oder zu einem Befehl, der zum Starten des autopep8-Servers und eines beliebigen Unterprozesses verwendet wird. Akzeptiert ein Array aus einer einzelnen oder mehreren Zeichenfolgen. Bei Festlegung auf \"[]\" verwendet die Erweiterung den Pfad zum ausgewählten Python-Interpreter. Wenn Sie einen Befehl übergeben, sollte jedes Argument als separate Zeichenfolge im Array bereitgestellt werden.","settings.path.description":"Pfad oder Befehl, der von der Erweiterung zum Formatieren von Python-Dateien mit autopep8 verwendet werden soll. Akzeptiert ein Array aus einer einzelnen oder mehreren Zeichenfolgen. Wenn Sie einen Befehl übergeben, sollte jedes Argument als separate Zeichenfolge im Array bereitgestellt werden. Bei Festlegung auf \"[\"autopep8\"]\" wird die Version von autopep8 verwendet, die in der Umgebungsvariablen \"PATH\" verfügbar ist. Hinweis: Die Verwendung dieser Option kann das Formatieren verlangsamen. \n  Beispiele: \n  - `[\"~/global_env/autopep8\"]` \n  - `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"autopep8\"]`","settings.showNotifications.always.description":"Benachrichtigungen werden für alles angezeigt, was der Server beim Formatieren von Python-Dateien anzeigen will.","settings.showNotifications.description":"Steuert, wann Benachrichtigungen von dieser Erweiterung angezeigt werden.","settings.showNotifications.off.description":"Alle Benachrichtigungen sind deaktiviert. Alle Fehler oder Warnungen beim Formatieren von Python-Dateien sind weiterhin in den Protokollen verfügbar.","settings.showNotifications.onError.description":"Benachrichtigungen werden nur im Falle eines Fehlers beim Formatieren von Python-Dateien angezeigt.","settings.showNotifications.onWarning.description":"Beim Formatieren von Python-Dateien werden Benachrichtigungen zu Fehlern und Warnungen angezeigt."}
